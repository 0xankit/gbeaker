{"version":3,"file":"index.umd.min.js","sources":["../src/account.ts","../src/utils.ts","../src/contract.ts"],"sourcesContent":["import { stringToPath } from '@cosmjs/crypto';\nimport type { HttpEndpoint } from '@cosmjs/tendermint-rpc';\nimport {\n  Coin,\n  GasPrice,\n  Secp256k1HdWallet,\n  SigningCosmWasmClient,\n} from 'cosmwasm';\n\ntype Config = {\n  global: {\n    account_prefix: string;\n    derivation_path: string;\n    networks: { [x: string]: { rpc_endpoint: string | HttpEndpoint } };\n    gas_price: string;\n    accounts: Record<string, { mnemonic: string }>;\n  };\n};\n\nexport class Account {\n  signingClient: SigningCosmWasmClient;\n  wallet: Secp256k1HdWallet;\n\n  constructor(wallet: Secp256k1HdWallet, signingClient: SigningCosmWasmClient) {\n    this.wallet = wallet;\n    this.signingClient = signingClient;\n  }\n\n  async getBalance(denom: string): Promise<Coin> {\n    const accounts = await this.wallet.getAccounts();\n    const address = accounts[0]?.address;\n\n    if (!address) {\n      throw Error(`No account not found from: ${accounts}`);\n    }\n\n    return await this.signingClient.getBalance(address, denom);\n  }\n}\n\nexport const fromMnemonic = async (\n  conf: Config,\n  network: string | number,\n  mnemonic: string,\n): Promise<Account> => {\n  if (typeof conf.global.account_prefix !== 'string') {\n    throw Error('`account_prefix` must be string');\n  }\n\n  const options = {\n    prefix: conf.global.account_prefix,\n    hdPaths: [stringToPath(conf.global.derivation_path)],\n  };\n  const wallet = await Secp256k1HdWallet.fromMnemonic(mnemonic, options);\n\n  const networkInfo = conf.global.networks[network];\n  if (!networkInfo) {\n    throw Error(`network info for ${network} not found in the config`);\n  }\n\n  const signingClient = await SigningCosmWasmClient.connectWithSigner(\n    networkInfo.rpc_endpoint,\n    wallet,\n    { gasPrice: GasPrice.fromString(conf.global.gas_price) },\n  );\n  return new Account(wallet, signingClient);\n};\n\nexport const getAccounts = async (conf: Config, network: string) => {\n  const accountName = Object.keys(conf.global.accounts);\n  const account = await Promise.all(\n    Object.values(conf.global.accounts).map((a) =>\n      fromMnemonic(conf, network, a.mnemonic),\n    ),\n  );\n\n  return Object.fromEntries(accountName.map((name, i) => [name, account[i]]));\n};\n","/* eslint-disable */\n\nconst id = <T>(x: T) => x;\n\nexport const mapObject = (\n  o: Record<string, unknown>,\n  f: Function,\n  g: Function,\n): Record<string, unknown> =>\n  Object.fromEntries(Object.entries(o).map(([k, v]) => [f(k), g(v)]));\n\nexport const mapValues = (o: Record<string, unknown>, g: Function) =>\n  mapObject(o, id, g);\n\nexport const extendWith =\n  (properties: Record<string, unknown>) =>\n  (context: Record<string, unknown>) => {\n    Object.entries(properties).forEach(([k, v]) => {\n      // @ts-ignore\n      context[k] = v;\n      // Object.defineProperty(context, k, {\n      //   configurable: true,\n      //   enumerable: true,\n      //   value: v,\n      // });\n    });\n  };\n","import type {\n  CodeDetails,\n  Contract as ContractInfo,\n  CosmWasmClient,\n  ExecuteResult,\n  StdFee,\n} from 'cosmwasm';\nimport type { Account } from './account';\nimport { mapObject, mapValues } from './utils';\n\ntype Msg = Record<string, unknown>;\n\nexport class Contract {\n  address: string;\n  client: CosmWasmClient;\n\n  constructor(address: string, client: CosmWasmClient) {\n    this.address = address;\n    this.client = client;\n  }\n\n  async getInfo(): Promise<ContractInfo> {\n    return await this.client.getContract(this.address);\n  }\n\n  async getCode(): Promise<CodeDetails> {\n    return this.client.getCodeDetails((await this.getInfo()).codeId);\n  }\n\n  async query(qmsg: Msg): Promise<unknown> {\n    return this.client.queryContractSmart(this.address, qmsg);\n  }\n\n  execute(\n    xmsg: Msg,\n    senderAddress: string | null,\n    fee: number | 'auto' | StdFee = 'auto',\n  ) {\n    return {\n      by: async (account: Account): Promise<ExecuteResult> => {\n        const _senderAddress =\n          senderAddress || (await account.wallet.getAccounts())[0]?.address;\n\n        if (!_senderAddress) {\n          throw Error('Unable to get sender address');\n        }\n\n        return await account.signingClient.execute(\n          _senderAddress,\n          this.address,\n          xmsg,\n          fee,\n        );\n      },\n    };\n  }\n}\n\nexport const getContracts = (\n  client: CosmWasmClient,\n  state: Record<string, unknown>,\n) => {\n  return mapValues(\n    state,\n    (contractInfo: { addresses: Record<string, Record<string, string>> }) => {\n      const addresses = contractInfo.addresses;\n      const prefixLabel = (label: string) => `$${label}`;\n      let contracts = mapObject(\n        addresses,\n        prefixLabel,\n        (addr: string) => new Contract(addr, client),\n      );\n\n      if (typeof contracts['$default'] === 'object' && contracts['$default']) {\n        contracts = {\n          ...contracts,\n          ...contracts['$default'],\n        };\n\n        Object.setPrototypeOf(contracts, Contract.prototype);\n      }\n      return contracts;\n    },\n  );\n};\n"],"names":["Account","wallet","signingClient","this","prototype","getBalance","denom","getAccounts","accounts","_b","sent","address","_a","Error","concat","id","x","mapObject","o","f","g","Object","fromEntries","entries","map","k","v","Contract","client","getInfo","getContract","getCode","getCodeDetails","_c","codeId","query","qmsg","queryContractSmart","execute","xmsg","senderAddress","fee","_this","by","account","__awaiter","_senderAddress","properties","context","forEach","conf","network","accountName","keys","global","Promise","all","values","a","mnemonic","account_prefix","options","prefix","hdPaths","stringToPath","derivation_path","Secp256k1HdWallet","fromMnemonic","networkInfo","networks","SigningCosmWasmClient","connectWithSigner","rpc_endpoint","gasPrice","GasPrice","fromString","gas_price","name","i","state","contractInfo","addresses","contracts","label","addr","__assign","setPrototypeOf"],"mappings":";;;;;+2DAmBA,IAAAA,EAAA,WAIE,SAAYA,EAAAC,EAA2BC,GACrCC,KAAKF,OAASA,EACdE,KAAKD,cAAgBA,EAazB,OAVQF,EAAUI,UAAAC,WAAhB,SAAiBC,oGACE,KAAA,EAAA,MAAA,CAAA,EAAMH,KAAKF,OAAOM,sBAGnC,GAHMC,EAAWC,EAA+BC,SAC1CC,EAAqB,UAAXH,EAAS,UAAE,IAAAI,OAAA,EAAAA,EAAED,SAG3B,MAAME,MAAM,8BAAAC,OAA8BN,IAGrC,MAAM,CAAA,EAAAL,KAAKD,cAAcG,WAAWM,EAASL,IAApD,KAAA,EAAA,MAAA,CAAA,EAAOG,kBAEVT,KCpCKe,EAAK,SAAIC,GAAS,OAAAA,GAEXC,EAAY,SACvBC,EACAC,EACAC,GAEA,OAAAC,OAAOC,YAAYD,OAAOE,QAAQL,GAAGM,KAAI,SAACZ,OAACa,EAACb,EAAA,GAAEc,EAACd,EAAA,GAAM,MAAA,CAACO,EAAEM,GAAIL,EAAEM,SCGhEC,EAAA,WAIE,SAAYA,EAAAhB,EAAiBiB,GAC3BzB,KAAKQ,QAAUA,EACfR,KAAKyB,OAASA,EAsClB,OAnCQD,EAAAvB,UAAAyB,QAAN,qGACS,MAAM,CAAA,EAAA1B,KAAKyB,OAAOE,YAAY3B,KAAKQ,UAA1C,KAAA,EAAA,MAAA,CAAA,EAAOC,kBAGHe,EAAAvB,UAAA2B,QAAN,6GACqC,OAA5BtB,GAAAG,EAAAT,KAAKyB,QAAOI,eAAgB,CAAA,EAAM7B,KAAK0B,WAA9C,KAAA,EAAA,MAAA,CAAA,EAAOpB,WAA4BwB,EAAAvB,OAAsBwB,kBAGrDP,EAAKvB,UAAA+B,MAAX,SAAYC,sEACV,MAAA,CAAA,EAAOjC,KAAKyB,OAAOS,mBAAmBlC,KAAKQ,QAASyB,WAGtDT,EAAAvB,UAAAkC,QAAA,SACEC,EACAC,EACAC,GAHF,IAsBCC,EAAAvC,KAjBC,YAFA,IAAAsC,IAAAA,EAAsC,QAE/B,CACLE,GAAI,SAAOC,GAAgB,OAAAC,EAAAH,OAAA,OAAA,GAAA,8EAEvB9B,EAAA4B,GAAa,CAAA,EAAA,GAAK,CAAA,EAAMI,EAAQ3C,OAAOM,sBAAtBK,UAAAH,EAACwB,EAAkCvB,OAAE,yBAAIC,yBAE5D,KAHMmC,EAC6DlC,GAGjE,MAAMC,MAAM,gCAGP,MAAA,CAAA,EAAM+B,EAAQ1C,cAAcoC,QACjCQ,EACA3C,KAAKQ,QACL4B,EACAE,IAJF,KAAA,EAAA,MAAA,CAAA,EAAOR,oBASdN,2CDzCC,SAACoB,GACD,OAAA,SAACC,GACC3B,OAAOE,QAAQwB,GAAYE,SAAQ,SAACrC,OAACa,EAACb,EAAA,GAAEc,EAACd,EAAA,GAEvCoC,EAAQvB,GAAKC,qBDiDQ,SAAOwB,EAAcC,GAAe,OAAAN,OAAA,OAAA,OAAA,GAAA,qEAE7C,OADVO,EAAc/B,OAAOgC,KAAKH,EAAKI,OAAO9C,UAC5B,CAAA,EAAM+C,QAAQC,IAC5BnC,OAAOoC,OAAOP,EAAKI,OAAO9C,UAAUgB,KAAI,SAACkC,GACvC,OAhCsB,SAC1BR,EACAC,EACAQ,GAAgB,OAAAd,OAAA,OAAA,OAAA,GAAA,yEAEhB,GAA0C,iBAA/BK,EAAKI,OAAOM,eACrB,MAAM/C,MAAM,mCAOC,OAJTgD,EAAU,CACdC,OAAQZ,EAAKI,OAAOM,eACpBG,QAAS,CAACC,EAAYA,aAACd,EAAKI,OAAOW,mBAEhB,CAAA,EAAAC,EAAiBA,kBAACC,aAAaR,EAAUE,WAG9D,GAHM5D,EAASW,EAAuDF,SAEhE0D,EAAclB,EAAKI,OAAOe,SAASlB,IAEvC,MAAMtC,MAAM,oBAAAC,OAAoBqC,EAAO,6BAGnB,MAAM,CAAA,EAAAmB,EAAqBA,sBAACC,kBAChDH,EAAYI,aACZvE,EACA,CAAEwE,SAAUC,EAAQA,SAACC,WAAWzB,EAAKI,OAAOsB,qBAE9C,OALM1E,EAAgBU,EAIrBF,OACD,CAAA,EAAO,IAAIV,EAAQC,EAAQC,WAOvBiE,CAAajB,EAAMC,EAASO,EAAEC,sBAIlC,OANMf,EAAUhC,EAIfF,OAEM,CAAA,EAAAW,OAAOC,YAAY8B,EAAY5B,KAAI,SAACqD,EAAMC,GAAM,MAAA,CAACD,EAAMjC,EAAQkC,gCElB5C,SAC1BlD,EACAmD,GAEA,ODnDoD3D,ECqDlD,SAAC4D,GACC,IAAMC,EAAYD,EAAaC,UAE3BC,EAAYjE,EACdgE,GAFkB,SAACE,GAAkB,MAAA,IAAArE,OAAIqE,MAIzC,SAACC,GAAiB,OAAA,IAAIzD,EAASyD,EAAMxD,MAWvC,MARqC,iBAA1BsD,EAAoB,UAAkBA,EAAoB,WACnEA,EAASG,EAAAA,EAAA,GACJH,GACAA,EAAoB,UAGzB7D,OAAOiE,eAAeJ,EAAWvD,EAASvB,YAErC8E,GDrEXjE,ECmDE8D,EDnDWhE,EAAIK,GADM,IAA6BA"}