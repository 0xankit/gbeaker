{"version":3,"file":"index.umd.min.js","sources":["../src/account.ts","../src/utils.ts","../src/contract.ts"],"sourcesContent":["import { stringToPath } from '@cosmjs/crypto';\nimport type { HttpEndpoint } from '@cosmjs/tendermint-rpc';\nimport { Secp256k1HdWallet, SigningCosmWasmClient } from 'cosmwasm';\n\ntype Config = {\n  global: {\n    account_prefix: any;\n    derivation_path: string;\n    networks: { [x: string]: { rpc_endpoint: string | HttpEndpoint } };\n    gas_price: any;\n    accounts: Record<string, { mnemonic: string }>;\n  };\n};\n\nexport type Account = {\n  signingClient: SigningCosmWasmClient;\n  wallet: Secp256k1HdWallet;\n};\n\nexport const fromMnemonic = async (\n  conf: Config,\n  network: string | number,\n  mnemonic: string,\n): Promise<Account> => {\n  const options = {\n    prefix: conf.global.account_prefix,\n    hdPaths: [stringToPath(conf.global.derivation_path)],\n  };\n  const wallet = await Secp256k1HdWallet.fromMnemonic(mnemonic, options);\n\n  const networkInfo = conf.global.networks[network];\n  if (!networkInfo) {\n    throw Error(`network info for ${network} not found in the config`);\n  }\n\n  const signingClient = await SigningCosmWasmClient.connectWithSigner(\n    networkInfo.rpc_endpoint,\n    wallet,\n    { gasPrice: conf.global.gas_price },\n  );\n  return { signingClient, wallet };\n};\n\nexport const getAccounts = async (conf: Config, network: string) => {\n  const accountName = Object.keys(conf.global.accounts);\n  const account = await Promise.all(\n    Object.values(conf.global.accounts).map((a) =>\n      fromMnemonic(conf, network, a.mnemonic),\n    ),\n  );\n\n  return Object.fromEntries(accountName.map((name, i) => [name, account[i]]));\n};\n","const id = (x: any) => x;\n\nexport const mapObject = (o: Object, f: Function, g: Function): Object =>\n  Object.fromEntries(Object.entries(o).map(([k, v]) => [f(k), g(v)]));\n\nexport const mapValues = (o: Object, g: Function) => mapObject(o, id, g);\n\nexport const extendWith = (properties: Object) => (context: Object) => {\n  Object.entries(properties).forEach(([k, v]) => {\n    Object.defineProperty(context, k, {\n      configurable: true,\n      enumerable: true,\n      value: v,\n    });\n  });\n};\n","import type { CosmWasmClient, StdFee } from 'cosmwasm';\nimport type { Account } from './account';\nimport { mapObject, mapValues } from './utils';\n\ntype Msg = Record<string, unknown>;\nexport const getContracts = (client: CosmWasmClient, state: Object) => {\n  const getContract = (address: string) => ({\n    address,\n    async query(qmsg: Msg) {\n      return await client.queryContractSmart(address, qmsg);\n    },\n    execute(\n      xmsg: Msg,\n      senderAddress: string | null,\n      fee: number | 'auto' | StdFee = 'auto',\n    ) {\n      return {\n        async by(account: Account) {\n          const _senderAddress =\n            senderAddress || (await account.wallet.getAccounts())[0]?.address;\n\n          if (!_senderAddress) {\n            throw Error('Unable to get sender address');\n          }\n\n          return await account.signingClient.execute(\n            _senderAddress,\n            address,\n            xmsg,\n            fee,\n          );\n        },\n      };\n    },\n  });\n\n  return mapValues(\n    state,\n    (contractInfo: { addresses: Record<string, Record<string, string>> }) => {\n      const addresses = contractInfo.addresses;\n      const prefixLabel = (label: string) => `$${label}`;\n      let contracts = mapObject(addresses, prefixLabel, getContract);\n\n      // @ts-ignore\n      if (contracts.$default) {\n        contracts = {\n          ...contracts,\n          // @ts-ignore\n          ...contracts.$default,\n        };\n      }\n      return contracts;\n    },\n  );\n};\n"],"names":["id","x","mapObject","o","f","g","Object","fromEntries","entries","map","_a","k","v","properties","context","forEach","defineProperty","configurable","enumerable","value","conf","network","__awaiter","accountName","keys","global","accounts","Promise","all","values","a","mnemonic","options","prefix","account_prefix","hdPaths","stringToPath","derivation_path","Secp256k1HdWallet","fromMnemonic","wallet","sent","networkInfo","networks","Error","concat","SigningCosmWasmClient","connectWithSigner","rpc_endpoint","gasPrice","gas_price","signingClient","account","name","i","client","state","getContract","address","query","qmsg","queryContractSmart","execute","xmsg","senderAddress","fee","by","_b","getAccounts","_c","_senderAddress","contractInfo","addresses","contracts","label","$default"],"mappings":";;;;;+2DAmBO,ICnBDA,EAAK,SAACC,GAAW,OAAAA,GAEVC,EAAY,SAACC,EAAWC,EAAaC,GAChD,OAAAC,OAAOC,YAAYD,OAAOE,QAAQL,GAAGM,KAAI,SAACC,OAACC,EAACD,EAAA,GAAEE,EAACF,EAAA,GAAM,MAAA,CAACN,EAAEO,GAAIN,EAAEO,sBAItC,SAACC,GAAuB,OAAA,SAACC,GACjDR,OAAOE,QAAQK,GAAYE,SAAQ,SAACL,OAACC,EAACD,EAAA,GAAEE,EAACF,EAAA,GACvCJ,OAAOU,eAAeF,EAASH,EAAG,CAChCM,cAAc,EACdC,YAAY,EACZC,MAAOP,uBD+Bc,SAAOQ,EAAcC,GAAe,OAAAC,OAAA,OAAA,OAAA,GAAA,qEAE7C,OADVC,EAAcjB,OAAOkB,KAAKJ,EAAKK,OAAOC,UAC5B,CAAA,EAAMC,QAAQC,IAC5BtB,OAAOuB,OAAOT,EAAKK,OAAOC,UAAUjB,KAAI,SAACqB,GACvC,OA5BsB,SAC1BV,EACAC,EACAU,GAAgB,OAAAT,OAAA,OAAA,OAAA,GAAA,uEAMD,OAJTU,EAAU,CACdC,OAAQb,EAAKK,OAAOS,eACpBC,QAAS,CAACC,EAAYA,aAAChB,EAAKK,OAAOY,mBAEhB,CAAA,EAAAC,EAAiBA,kBAACC,aAAaR,EAAUC,WAG9D,GAHMQ,EAAS9B,EAAuD+B,SAEhEC,EAActB,EAAKK,OAAOkB,SAAStB,IAEvC,MAAMuB,MAAM,oBAAAC,OAAoBxB,EAAO,6BAGnB,MAAM,CAAA,EAAAyB,EAAAA,sBAAsBC,kBAChDL,EAAYM,aACZR,EACA,CAAES,SAAU7B,EAAKK,OAAOyB,oBAE1B,MAAA,CAAA,EAAO,CAAEC,cALazC,EAIrB+B,OACuBD,OAAMA,WAO1BD,CAAanB,EAAMC,EAASS,EAAEC,sBAIlC,OANMqB,EAAU1C,EAIf+B,OAEM,CAAA,EAAAnC,OAAOC,YAAYgB,EAAYd,KAAI,SAAC4C,EAAMC,GAAM,MAAA,CAACD,EAAMD,EAAQE,gCE9C5C,SAACC,EAAwBC,GACnD,IDDmCnD,ECC7BoD,EAAc,SAACC,GAAoB,MAAC,CACxCA,QAAOA,EACDC,MAAN,SAAYC,6FACH,MAAM,CAAA,EAAAL,EAAOM,mBAAmBH,EAASE,IAAhD,KAAA,EAAA,MAAA,CAAA,EAAOlD,kBAEToD,QAAA,SACEC,EACAC,EACAC,GAEA,YAFA,IAAAA,IAAAA,EAAsC,QAE/B,CACCC,GAAN,SAASd,kHAELe,EAAAH,GAAa,CAAA,EAAA,GAAK,CAAA,EAAMZ,EAAQZ,OAAO4B,sBAAtBD,UAAAzD,EAAC2D,EAAkC5B,OAAE,yBAAIiB,yBAE5D,KAHMY,EAC6DH,GAGjE,MAAMvB,MAAM,gCAGP,MAAA,CAAA,EAAMQ,EAAQD,cAAcW,QACjCQ,EACAZ,EACAK,EACAE,IAJF,KAAA,EAAA,MAAA,CAAA,EAAOI,sBAWf,OD/BmChE,ECiCjC,SAACkE,GACC,IAAMC,EAAYD,EAAaC,UAE3BC,EAAYvE,EAAUsE,GADN,SAACE,GAAkB,MAAA,IAAA7B,OAAI6B,KACOjB,GAUlD,OAPIgB,EAAUE,WACZF,SACKA,GAEAA,EAAUE,WAGVF,GD9CwCvE,ECgCjDsD,EDhC8DxD,EAAIK"}