{"version":3,"file":"index.umd.min.js","sources":["../src/account.ts","../src/utils.ts","../src/contract.ts"],"sourcesContent":["import { stringToPath } from '@cosmjs/crypto';\nimport type { HttpEndpoint } from '@cosmjs/tendermint-rpc';\nimport { Coin, Secp256k1HdWallet, SigningCosmWasmClient } from 'cosmwasm';\n\ntype Config = {\n  global: {\n    account_prefix: any;\n    derivation_path: string;\n    networks: { [x: string]: { rpc_endpoint: string | HttpEndpoint } };\n    gas_price: any;\n    accounts: Record<string, { mnemonic: string }>;\n  };\n};\n\nexport type Account = {\n  signingClient: SigningCosmWasmClient;\n  wallet: Secp256k1HdWallet;\n  getBalance: (denom: string) => Promise<Coin>;\n};\n\nexport const fromMnemonic = async (\n  conf: Config,\n  network: string | number,\n  mnemonic: string,\n): Promise<Account> => {\n  const options = {\n    prefix: conf.global.account_prefix,\n    hdPaths: [stringToPath(conf.global.derivation_path)],\n  };\n  const wallet = await Secp256k1HdWallet.fromMnemonic(mnemonic, options);\n\n  const networkInfo = conf.global.networks[network];\n  if (!networkInfo) {\n    throw Error(`network info for ${network} not found in the config`);\n  }\n\n  const signingClient = await SigningCosmWasmClient.connectWithSigner(\n    networkInfo.rpc_endpoint,\n    wallet,\n    { gasPrice: conf.global.gas_price },\n  );\n  return {\n    signingClient,\n    wallet,\n    async getBalance(denom) {\n      const accounts = await wallet.getAccounts();\n      const address = accounts[0]?.address;\n\n      if (!address) {\n        throw Error(`No account not found from: ${accounts}`);\n      }\n\n      return await signingClient.getBalance(address, denom);\n    },\n  };\n};\n\nexport const getAccounts = async (conf: Config, network: string) => {\n  const accountName = Object.keys(conf.global.accounts);\n  const account = await Promise.all(\n    Object.values(conf.global.accounts).map((a) =>\n      fromMnemonic(conf, network, a.mnemonic),\n    ),\n  );\n\n  return Object.fromEntries(accountName.map((name, i) => [name, account[i]]));\n};\n","const id = (x: any) => x;\n\nexport const mapObject = (o: Object, f: Function, g: Function): Object =>\n  Object.fromEntries(Object.entries(o).map(([k, v]) => [f(k), g(v)]));\n\nexport const mapValues = (o: Object, g: Function) => mapObject(o, id, g);\n\nexport const extendWith = (properties: Object) => (context: Object) => {\n  Object.entries(properties).forEach(([k, v]) => {\n    // @ts-ignore\n    context[k] = v;\n    // Object.defineProperty(context, k, {\n    //   configurable: true,\n    //   enumerable: true,\n    //   value: v,\n    // });\n  });\n};\n","import type { CosmWasmClient, StdFee } from 'cosmwasm';\nimport type { Account } from './account';\nimport { mapObject, mapValues } from './utils';\n\ntype Msg = Record<string, unknown>;\nexport const getContracts = (client: CosmWasmClient, state: Object) => {\n  const getContract = (address: string) => ({\n    address,\n    async getInfo() {\n      return client.getContract(address);\n    },\n    async getCode() {\n      return client.getCodeDetails((await this.getInfo()).codeId);\n    },\n    async query(qmsg: Msg) {\n      return await client.queryContractSmart(address, qmsg);\n    },\n    execute(\n      xmsg: Msg,\n      senderAddress: string | null,\n      fee: number | 'auto' | StdFee = 'auto',\n    ) {\n      return {\n        async by(account: Account) {\n          const _senderAddress =\n            senderAddress || (await account.wallet.getAccounts())[0]?.address;\n\n          if (!_senderAddress) {\n            throw Error('Unable to get sender address');\n          }\n\n          return await account.signingClient.execute(\n            _senderAddress,\n            address,\n            xmsg,\n            fee,\n          );\n        },\n      };\n    },\n  });\n\n  return mapValues(\n    state,\n    (contractInfo: { addresses: Record<string, Record<string, string>> }) => {\n      const addresses = contractInfo.addresses;\n      const prefixLabel = (label: string) => `$${label}`;\n      let contracts = mapObject(addresses, prefixLabel, getContract);\n\n      // @ts-ignore\n      if (contracts.$default) {\n        contracts = {\n          ...contracts,\n          // @ts-ignore\n          ...contracts.$default,\n        };\n      }\n      return contracts;\n    },\n  );\n};\n"],"names":["id","x","mapObject","o","f","g","Object","fromEntries","entries","map","_a","k","v","properties","context","forEach","conf","network","__awaiter","accountName","keys","global","accounts","Promise","all","values","a","mnemonic","options","prefix","account_prefix","hdPaths","stringToPath","derivation_path","Secp256k1HdWallet","fromMnemonic","wallet","sent","networkInfo","networks","Error","concat","SigningCosmWasmClient","connectWithSigner","rpc_endpoint","gasPrice","gas_price","signingClient","getBalance","denom","getAccounts","_b","address","account","name","i","client","state","getContract","getInfo","getCode","getCodeDetails","this","_c","codeId","query","qmsg","queryContractSmart","execute","xmsg","senderAddress","fee","by","_senderAddress","contractInfo","addresses","contracts","label","$default"],"mappings":"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"}