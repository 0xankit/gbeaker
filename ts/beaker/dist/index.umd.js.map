{"version":3,"file":"index.umd.js","sources":["../src/account.ts","../src/utils.ts","../src/contract.ts"],"sourcesContent":["import { stringToPath } from '@cosmjs/crypto';\nimport type { HttpEndpoint } from '@cosmjs/tendermint-rpc';\nimport { Coin, Secp256k1HdWallet, SigningCosmWasmClient } from 'cosmwasm';\n\ntype Config = {\n  global: {\n    account_prefix: any;\n    derivation_path: string;\n    networks: { [x: string]: { rpc_endpoint: string | HttpEndpoint } };\n    gas_price: any;\n    accounts: Record<string, { mnemonic: string }>;\n  };\n};\n\nexport type Account = {\n  signingClient: SigningCosmWasmClient;\n  wallet: Secp256k1HdWallet;\n  getBalance: (denom: string) => Promise<Coin>;\n};\n\nexport const fromMnemonic = async (\n  conf: Config,\n  network: string | number,\n  mnemonic: string,\n): Promise<Account> => {\n  const options = {\n    prefix: conf.global.account_prefix,\n    hdPaths: [stringToPath(conf.global.derivation_path)],\n  };\n  const wallet = await Secp256k1HdWallet.fromMnemonic(mnemonic, options);\n\n  const networkInfo = conf.global.networks[network];\n  if (!networkInfo) {\n    throw Error(`network info for ${network} not found in the config`);\n  }\n\n  const signingClient = await SigningCosmWasmClient.connectWithSigner(\n    networkInfo.rpc_endpoint,\n    wallet,\n    { gasPrice: conf.global.gas_price },\n  );\n  return {\n    signingClient,\n    wallet,\n    async getBalance(denom) {\n      const accounts = await wallet.getAccounts();\n      const address = accounts[0]?.address;\n\n      if (!address) {\n        throw Error(`No account not found from: ${accounts}`);\n      }\n\n      return await signingClient.getBalance(address, denom);\n    },\n  };\n};\n\nexport const getAccounts = async (conf: Config, network: string) => {\n  const accountName = Object.keys(conf.global.accounts);\n  const account = await Promise.all(\n    Object.values(conf.global.accounts).map((a) =>\n      fromMnemonic(conf, network, a.mnemonic),\n    ),\n  );\n\n  return Object.fromEntries(accountName.map((name, i) => [name, account[i]]));\n};\n","const id = (x: any) => x;\n\nexport const mapObject = (o: Object, f: Function, g: Function): Object =>\n  Object.fromEntries(Object.entries(o).map(([k, v]) => [f(k), g(v)]));\n\nexport const mapValues = (o: Object, g: Function) => mapObject(o, id, g);\n\nexport const extendWith = (properties: Object) => (context: Object) => {\n  Object.entries(properties).forEach(([k, v]) => {\n    // @ts-ignore\n    context[k] = v;\n    // Object.defineProperty(context, k, {\n    //   configurable: true,\n    //   enumerable: true,\n    //   value: v,\n    // });\n  });\n};\n","import type { CosmWasmClient, StdFee } from 'cosmwasm';\nimport type { Account } from './account';\nimport { mapObject, mapValues } from './utils';\n\ntype Msg = Record<string, unknown>;\nexport const getContracts = (client: CosmWasmClient, state: Object) => {\n  const getContract = (address: string) => ({\n    address,\n    async getInfo() {\n      return client.getContract(address);\n    },\n    async getCode() {\n      return client.getCodeDetails((await this.getInfo()).codeId);\n    },\n    async query(qmsg: Msg) {\n      return await client.queryContractSmart(address, qmsg);\n    },\n    execute(\n      xmsg: Msg,\n      senderAddress: string | null,\n      fee: number | 'auto' | StdFee = 'auto',\n    ) {\n      return {\n        async by(account: Account) {\n          const _senderAddress =\n            senderAddress || (await account.wallet.getAccounts())[0]?.address;\n\n          if (!_senderAddress) {\n            throw Error('Unable to get sender address');\n          }\n\n          return await account.signingClient.execute(\n            _senderAddress,\n            address,\n            xmsg,\n            fee,\n          );\n        },\n      };\n    },\n  });\n\n  return mapValues(\n    state,\n    (contractInfo: { addresses: Record<string, Record<string, string>> }) => {\n      const addresses = contractInfo.addresses;\n      const prefixLabel = (label: string) => `$${label}`;\n      let contracts = mapObject(addresses, prefixLabel, getContract);\n\n      // @ts-ignore\n      if (contracts.$default) {\n        contracts = {\n          ...contracts,\n          // @ts-ignore\n          ...contracts.$default,\n        };\n      }\n      return contracts;\n    },\n  );\n};\n"],"names":["stringToPath","Secp256k1HdWallet","SigningCosmWasmClient"],"mappings":"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"}